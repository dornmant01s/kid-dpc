name: Android DPC CI

on:
  workflow_dispatch:
    inputs:
      release:
        description: "Create GitHub Release (true/false)"
        required: false
        default: "false"
  push:
    branches: [ main ]
    tags: [ "v*" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Install Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept SDK licenses
        run: yes | sdkmanager --licenses > /dev/null

      # ✅ 안정 조합 (35 플랫폼 + 34.x 빌드툴)
      - name: Install SDK packages
        run: |
          sdkmanager --install "platform-tools" "platforms;android-35" "build-tools;34.0.0"

      # ✅ Gradle 8.7 직접 다운로드 (래퍼 없어도 실행)
      - name: Download Gradle 8.7
        run: |
          curl -sLo gradle.zip https://services.gradle.org/distributions/gradle-8.7-bin.zip
          unzip -q gradle.zip
          echo "$PWD/gradle-8.7/bin" >> $GITHUB_PATH

      - name: Build app (debug+release)
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
        run: |
          gradle -v
          # debug 먼저 빌드(환경 점검), 그 다음 release 시도
          gradle :app:assembleDebug
          gradle :app:assembleRelease || echo "release failed; will use debug APK for QR"

      - name: Compute checksum & create QR JSON
        id: qr
        shell: bash
        run: |
          APK="app/build/outputs/apk/release/app-release.apk"
          if [ ! -f "$APK" ]; then
            APK="app/build/outputs/apk/debug/app-debug.apk"
          fi
          SHA256=$(openssl dgst -sha256 -binary "$APK" | openssl base64 -A | tr '+/' '-_' | tr -d '=')
          TAG="${GITHUB_REF_NAME:-manual}"
          FILE_NAME=$(basename "$APK")
          DOWNLOAD_URL="${{ github.server_url }}/${{ github.repository }}/releases/download/${TAG}/${FILE_NAME}"
          mkdir -p dist
          cat > dist/qr.json <<EOF
{
  "android.app.extra.PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME": "app.dpc.kid/.admin.KidAdminReceiver",
  "android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION": "${DOWNLOAD_URL}",
  "android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM": "${SHA256}"
}
EOF
          echo "qr=dist/qr.json" >> "$GITHUB_OUTPUT"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            app/build/outputs/apk/**/*.apk
            dist/qr.json

      - name: Create GitHub Release
        if: ${{ startsWith(github.ref, 'refs/tags/') || inputs.release == 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          files: |
            app/build/outputs/apk/release/app-release.apk
            dist/qr.json
